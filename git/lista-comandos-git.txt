========
[Configuracao so para unico repositorio]
git config user.name  = configura o nome de usuario
git config user.email configura o email de usuario
========

========
[Configuracao repositorio global]
git config --global user.name "Joao Carlos Fonseca"
git config --global user.email "jcfonsecagit@gmail.com"
========

mkidr = cria pasta

git tag = cria tags(marcaoes para versoes) v0.1 , v0.2 e etc..
---
git diff v0.1 v0.2 = ve as diferencas entre as versoes
---
git blame [nome do arquivo ] = mostra os autores e onde alteraram
---
git add = adiciona os arquivos para serem comitados
---
git add . = adiciona todos os arquivos
---
git add = *.txt (adiciona so arquivos .txt)
---
git add nome_da_pasta /  adiciona subpata do repositorio
---
git ls-files = verefica os arquivos que estao rastreados pelo git
---
git log = mostra os logs de commit
---
git whatchanged = mostra o que foi alterado em cada commit
---
git whatchanged -p = mostra o que foi alterado em cada commit detalhadamente
---
git remote = mostra repositorios remotos que estao na pasta
---
git remote add (origin <nome do repositorio de origem>) <url github>
---
git push oring master = envia os arquivos de <repositorio origem> criando a <branch>
---
git clone = Copia o repositorio para sua maquina ja com todas as configuracoes e branchs definidas
---
git pull origin [nome branch] = baixa o conte�do remoto e atualiza o seu conteudo local
---
git branch = Checa as branchs que exitem no repositorio local
---
git branch [nome] = Cria a branch com o nome escolido
---
git branch -r = Checa as branchs remotas
---
git push -u origin [nome branch] = Deixa a branch "ligada" traqueada ao repositorio, pois dessa forma ao dar pull (trazer) ou push(enviar) o git reconhece ela para ser atualizada e ficar de acordo com a remota
---
git branch -t origin/[nome da branch] = Cria uma branch com o mesmo nome da remota. Essa flag -t ja traqueia o caminho para ficar igual a da remota com
---
git branch -a = lista as branchs remotas e locais
---
git branch -d [nome da branch] = Ao utilizar esse comando com essa flag nos deletamos uma branch local
---
git push origin [nome da branch] = Deletamos as branchs remotas
---
git checkout [nome da branch] = Nos trocamos entre branchs
---
git checkout -b [nome da branch] = Ao utilizar esse comando com essa flag nos criamos uma branch e ja entramos nela para criar as alteracoes necessarias
---
git fetch origin = Verifica todas as alteracoes que foram feitas no repositorio referente ao origin
---

=====
Bizus do Curso Justen
=====

$ git log decorate = mostra algumas informações.
---
$ git log --author = "Teste" mostra todos os commits que tenhão teste como autor
---
$ git log shortlog = mostra os autores, commits que fizeram e quantidade
---
$ git shortlog -sn = mostra os autores,  e quantidade de commits que fizeram
---
$ git log --graph = mostra em forma gráfica o que está acontecendo.
---
$ git show [HASH] = mostra o que foi feito no commit
---
$ git diff --name-only = mostra só o nome dos arquivos que foram modificados
---
git reset HEAD = desfaz a alteração depois de comitado
---
git commit -am "[mensagem aqui]" = Já comita todos os arquivos modificados e manda com a mensagem
---
git reset --soft [HASH DO COMIT ANTERIOR AO QUE VC QUER VOLTAR] = desfaz o comit e volta para estado de modificado no stage permanecendo ainda com as modificações que foram feitas
---
git reset --mixed [HASH DO COMIT ANTERIOR AO QUE VC QUER VOLTAR] = desfaz o comit e volta para estado de modificado no stage preparada para ser dado o commit
---
git reset --hard [HASH DO COMIT ANTERIOR AO QUE VC QUER VOLTAR] = desfaz tudo inclusive as alterações
---
git push -u origin master = Envia os arquivos para o repositório remoto já trakeando ele (-u), sendo assim na próxima vez só é preciso digitar

---
git checkout -b [NOME BRANCH] = Cria um novo branch com o nome passado

---
git branch -D [NOME BRANCH] = deleta o branch especificado atravez do nome
---
git merge [NOME BRANCH] = junta o branch ao que está o ponteiro head
